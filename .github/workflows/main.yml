name: Main workflow

on:
  push:
    branches: [ develop, feature/instance-api ]
  pull_request:
    branches: [ develop, feature/instance-api ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  LOCAL_VERSION_NUMBER_FILE: build_version.txt

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    outputs:
      revision-number: ${{ steps.version.outputs.revision-number }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2.3.4

    - name: Set up Python environment
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.x
        architecture: x64

    - name: Determine the project’s version
      id: version
      uses: anttikivi/maintain-revision@v0.10.1
      with:
        type: python
        file: 'couplet_composer/__version__.py'
        upload: false
        suffix-variable: _VERSION_SUFFIX

    - name: Cache dependencies
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install --upgrade setuptools wheel

    - name: Run lint
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --builtins=FileNotFoundError --show-source --statistics --exclude=./couplet_composer/llvm/run-clang-tidy.py
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=./couplet_composer/llvm/run-clang-tidy.py

    - name: Run tests
      run: |
        pip install pytest
        pytest
      if: github.ref != 'refs/heads/feature/instance-api'

    - name: Create distribution archives
      run: python setup.py sdist bdist_wheel

    - name: Upload build artefacts
      uses: actions/upload-artifact@v2.2.3
      with:
        name: couplet-composer-${{ steps.version.outputs.version }}
        path: dist/**/*.tar.gz
        
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2.3.4

    - name: Set up Python environment
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.x
        architecture: x64

    - name: Determine the project’s version
      id: version
      uses: anttikivi/maintain-revision@v0.10.1
      with:
        type: python
        file: 'couplet_composer/__version__.py'
        download: false
        suffix-variable: _VERSION_SUFFIX
        revision-number: ${{ needs.build.outputs.revision-number }}

    - name: Cache dependencies
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install --upgrade setuptools wheel twine

    - name: Create distribution archives
      run: python setup.py sdist bdist_wheel
    
    - name: Upload to TestPyPI
      run: twine upload -r testpypi dist/* -u __token__ -p pypi-${{ secrets.TEST_PYPI_API_TOKEN }}

  install:
    name: Install
    runs-on: ubuntu-latest
    needs: [deploy]
    
    steps:
    - name: Set up Python environment
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.x
        architecture: x64

    - name: Install the project
      run: |
        python -m pip install --upgrade pip
        pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ couplet-composer
